SELECT
  *
FROM
  "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
LIMIT
  10;
-----------------------------------------------------
--  Q1. Display all columns for all transactions.
--Expected output: All columns

select*
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";


-----------------------------------------------------
--Q2. Display only the Transaction ID, Date, and Customer ID for all records.
--Expected output: Transaction ID, Date, Customer ID
select transaction_id,
       date,
       customer_id
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";


-----------------------------------------------------
--Q3. Display all the distinct product categories in the dataset.
--Expected output: Product Category

select distinct
    product_category
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";


-----------------------------------------------------
--Q4. Display all the distinct gender values in the dataset.
--Expected output: Gender

select distinct
       gender
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";

    

-----------------------------------------------------
--Q5. Display all transactions where the Age is greater than 40.
--Expected output: All columns

select*
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
where age >40;

-----------------------------------------------------
--Q6. Display all transactions where the Price per Unit is between 100 and 500.
--Expected output: All columns

select*
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
where price_per_unit between 100 and 500;

-----------------------------------------------------
--Q7. Display all transactions where the Product Category is either 'Beauty' or
--'Electronics'.
--Expected output: All columns

select*
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
where product_category in('Beauty','Blectronics');

-----------------------------------------------------
--Q8. Display all transactions where the Product Category is not 'Clothing'.
--Expected output: All columns

select*
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
where product_category <> 'Clothing';

-----------------------------------------------------
--Q9. Display all transactions where the Quantity is greater than or equal to 3.
--Expected output: All columns

select*
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
where quantity >= 3;

-----------------------------------------------------
--Q10. Count the total number of transactions.
--Expected output: Total_Transactions

select count(*) as total_transation
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";

-----------------------------------------------------
--Q11. Find the average Age of customers.
--Expected output: Average_Age

select avg(age) as average_age
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";

-----------------------------------------------------
--Q12. Find the total quantity of products sold.
--Expected output: Total_Quantity

select sum(quantity) as total_quantity
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";

-----------------------------------------------------
--Q13. Find the maximum Total Amount spent in a single transaction.
-Expected output: Max_Total_Amount

select max(total_amount) as max_total_amount
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"; 
-----------------------------------------------------
--Q14. Find the minimum Price per Unit in the dataset.
--Expected output: Min_Price_per_Unit

select min(price_per_unit) as min_price_per_unit
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";

-----------------------------------------------------
--Q15. Find the number of transactions per Product Category.
--Expected output: Product Category, Transaction_Count

select product_category,
       count(*) as transactioin_category
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
group by product_category;

-----------------------------------------------------
--Q16. Find the total revenue (Total Amount) per gender.
--Expected output: Gender, Total_Revenue

select gender,
       sum(total_amount) as total_revenue
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
group by gender;

-----------------------------------------------------
--Q17. Find the average Price per Unit per product category.
--Expected output: Product Category, Average_Price

select product_category,
       avg(price_per_unit) as average_price
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
group by product_category;

-----------------------------------------------------
--Q18. Find the total revenue per product category where total revenue is greater than
--10,000.
--Expected output: Product Category, Total_Revenue

select product_category,
       sum(total_amount) as total_revenue
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
group by product_category
having sum(total_amount) > 10000;

-----------------------------------------------------
--Q19. Find the average quantity per product category where the average is more than 2.
--Expected output: Product Category, Average_Quantity

select product_category,
       avg(quantity) as average_quantity
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES"
group by product_category
having avg(quantity) >2;

-----------------------------------------------------
--Q20. Display a column called Spending_Level that shows 'High' if Total Amount > 1000,
--otherwise 'Low'.
--Expected output: Transaction ID, Total Amount, Spending_Level

select transaction_id,
       total_amount,
case
       when total_amount > 1000 then 'high'
       else 'low'
       end as spending_level
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";

-----------------------------------------------------
--21. Display a new column called Age_Group that labels customers as:
--• 'Youth' if Age < 30
--• 'Adult' if Age is between 30 and 59
--• 'Senior' if Age >= 60
--Expected output: Customer ID, Age, Age_Group

select customer_id,
       age,
       case
       when age < 30 then 'youth'
       when age between 30 and 59 then 'adult'
       else 'senior'
end as age_group
from "PRACTICAL1"."DATA_SET"."RETAIL_SALES";
